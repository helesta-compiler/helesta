
// Generated from SysY.g4 by ANTLR 4.10.1


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "Int", "Void", "Const", "Return", "If", "Else", "For", 
      "While", "Do", "Break", "Continue", "Lparen", "Rparen", "Lbrkt", "Rbrkt", 
      "Lbrace", "Rbrace", "Comma", "Semicolon", "Question", "Colon", "Minus", 
      "Exclamation", "Tilde", "Addition", "Multiplication", "Division", 
      "Modulo", "LAND", "LOR", "EQ", "NEQ", "LT", "LE", "GT", "GE", "IntLiteral", 
      "Identifier", "STRING", "ESC", "WS", "LINE_COMMENT", "COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'float'", "'='", "'int'", "'void'", "'const'", "'return'", "'if'", 
      "'else'", "'for'", "'while'", "'do'", "'break'", "'continue'", "'('", 
      "')'", "'['", "']'", "'{'", "'}'", "','", "';'", "'\\u003F'", "':'", 
      "'-'", "'!'", "'~'", "'+'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'=='", 
      "'!='", "'<'", "'<='", "'>'", "'>='"
    },
    std::vector<std::string>{
      "", "", "", "Int", "Void", "Const", "Return", "If", "Else", "For", 
      "While", "Do", "Break", "Continue", "Lparen", "Rparen", "Lbrkt", "Rbrkt", 
      "Lbrace", "Rbrace", "Comma", "Semicolon", "Question", "Colon", "Minus", 
      "Exclamation", "Tilde", "Addition", "Multiplication", "Division", 
      "Modulo", "LAND", "LOR", "EQ", "NEQ", "LT", "LE", "GT", "GE", "IntLiteral", 
      "Identifier", "STRING", "WS", "LINE_COMMENT", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,44,293,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,
  	1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
  	1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
  	17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
  	24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
  	30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,
  	35,1,36,1,36,1,37,1,37,1,37,1,38,4,38,215,8,38,11,38,12,38,216,1,38,1,
  	38,1,38,1,38,4,38,223,8,38,11,38,12,38,224,1,38,1,38,1,38,1,38,4,38,231,
  	8,38,11,38,12,38,232,3,38,235,8,38,1,39,1,39,5,39,239,8,39,10,39,12,39,
  	242,9,39,1,40,1,40,1,40,5,40,247,8,40,10,40,12,40,250,9,40,1,40,1,40,
  	1,41,1,41,1,41,1,41,3,41,258,8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
  	1,43,5,43,268,8,43,10,43,12,43,271,9,43,1,43,3,43,274,8,43,1,43,1,43,
  	1,43,1,43,1,44,1,44,1,44,1,44,5,44,284,8,44,10,44,12,44,287,9,44,1,44,
  	1,44,1,44,1,44,1,44,3,248,269,285,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
  	15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
  	39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
  	31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,0,85,
  	42,87,43,89,44,1,0,5,1,0,48,57,3,0,48,57,65,70,97,102,3,0,65,90,95,95,
  	97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,303,0,1,1,0,
  	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
  	1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
  	0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
  	0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
  	1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
  	0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
  	0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
  	1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
  	0,0,1,91,1,0,0,0,3,97,1,0,0,0,5,99,1,0,0,0,7,103,1,0,0,0,9,108,1,0,0,
  	0,11,114,1,0,0,0,13,121,1,0,0,0,15,124,1,0,0,0,17,129,1,0,0,0,19,133,
  	1,0,0,0,21,139,1,0,0,0,23,142,1,0,0,0,25,148,1,0,0,0,27,157,1,0,0,0,29,
  	159,1,0,0,0,31,161,1,0,0,0,33,163,1,0,0,0,35,165,1,0,0,0,37,167,1,0,0,
  	0,39,169,1,0,0,0,41,171,1,0,0,0,43,173,1,0,0,0,45,175,1,0,0,0,47,177,
  	1,0,0,0,49,179,1,0,0,0,51,181,1,0,0,0,53,183,1,0,0,0,55,185,1,0,0,0,57,
  	187,1,0,0,0,59,189,1,0,0,0,61,191,1,0,0,0,63,194,1,0,0,0,65,197,1,0,0,
  	0,67,200,1,0,0,0,69,203,1,0,0,0,71,205,1,0,0,0,73,208,1,0,0,0,75,210,
  	1,0,0,0,77,234,1,0,0,0,79,236,1,0,0,0,81,243,1,0,0,0,83,257,1,0,0,0,85,
  	259,1,0,0,0,87,263,1,0,0,0,89,279,1,0,0,0,91,92,5,102,0,0,92,93,5,108,
  	0,0,93,94,5,111,0,0,94,95,5,97,0,0,95,96,5,116,0,0,96,2,1,0,0,0,97,98,
  	5,61,0,0,98,4,1,0,0,0,99,100,5,105,0,0,100,101,5,110,0,0,101,102,5,116,
  	0,0,102,6,1,0,0,0,103,104,5,118,0,0,104,105,5,111,0,0,105,106,5,105,0,
  	0,106,107,5,100,0,0,107,8,1,0,0,0,108,109,5,99,0,0,109,110,5,111,0,0,
  	110,111,5,110,0,0,111,112,5,115,0,0,112,113,5,116,0,0,113,10,1,0,0,0,
  	114,115,5,114,0,0,115,116,5,101,0,0,116,117,5,116,0,0,117,118,5,117,0,
  	0,118,119,5,114,0,0,119,120,5,110,0,0,120,12,1,0,0,0,121,122,5,105,0,
  	0,122,123,5,102,0,0,123,14,1,0,0,0,124,125,5,101,0,0,125,126,5,108,0,
  	0,126,127,5,115,0,0,127,128,5,101,0,0,128,16,1,0,0,0,129,130,5,102,0,
  	0,130,131,5,111,0,0,131,132,5,114,0,0,132,18,1,0,0,0,133,134,5,119,0,
  	0,134,135,5,104,0,0,135,136,5,105,0,0,136,137,5,108,0,0,137,138,5,101,
  	0,0,138,20,1,0,0,0,139,140,5,100,0,0,140,141,5,111,0,0,141,22,1,0,0,0,
  	142,143,5,98,0,0,143,144,5,114,0,0,144,145,5,101,0,0,145,146,5,97,0,0,
  	146,147,5,107,0,0,147,24,1,0,0,0,148,149,5,99,0,0,149,150,5,111,0,0,150,
  	151,5,110,0,0,151,152,5,116,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,
  	155,5,117,0,0,155,156,5,101,0,0,156,26,1,0,0,0,157,158,5,40,0,0,158,28,
  	1,0,0,0,159,160,5,41,0,0,160,30,1,0,0,0,161,162,5,91,0,0,162,32,1,0,0,
  	0,163,164,5,93,0,0,164,34,1,0,0,0,165,166,5,123,0,0,166,36,1,0,0,0,167,
  	168,5,125,0,0,168,38,1,0,0,0,169,170,5,44,0,0,170,40,1,0,0,0,171,172,
  	5,59,0,0,172,42,1,0,0,0,173,174,5,63,0,0,174,44,1,0,0,0,175,176,5,58,
  	0,0,176,46,1,0,0,0,177,178,5,45,0,0,178,48,1,0,0,0,179,180,5,33,0,0,180,
  	50,1,0,0,0,181,182,5,126,0,0,182,52,1,0,0,0,183,184,5,43,0,0,184,54,1,
  	0,0,0,185,186,5,42,0,0,186,56,1,0,0,0,187,188,5,47,0,0,188,58,1,0,0,0,
  	189,190,5,37,0,0,190,60,1,0,0,0,191,192,5,38,0,0,192,193,5,38,0,0,193,
  	62,1,0,0,0,194,195,5,124,0,0,195,196,5,124,0,0,196,64,1,0,0,0,197,198,
  	5,61,0,0,198,199,5,61,0,0,199,66,1,0,0,0,200,201,5,33,0,0,201,202,5,61,
  	0,0,202,68,1,0,0,0,203,204,5,60,0,0,204,70,1,0,0,0,205,206,5,60,0,0,206,
  	207,5,61,0,0,207,72,1,0,0,0,208,209,5,62,0,0,209,74,1,0,0,0,210,211,5,
  	62,0,0,211,212,5,61,0,0,212,76,1,0,0,0,213,215,7,0,0,0,214,213,1,0,0,
  	0,215,216,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,235,1,0,0,0,218,
  	219,5,48,0,0,219,220,5,120,0,0,220,222,1,0,0,0,221,223,7,1,0,0,222,221,
  	1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,235,1,0,0,
  	0,226,227,5,48,0,0,227,228,5,88,0,0,228,230,1,0,0,0,229,231,7,1,0,0,230,
  	229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,
  	0,0,0,234,214,1,0,0,0,234,218,1,0,0,0,234,226,1,0,0,0,235,78,1,0,0,0,
  	236,240,7,2,0,0,237,239,7,3,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,
  	1,0,0,0,240,241,1,0,0,0,241,80,1,0,0,0,242,240,1,0,0,0,243,248,5,34,0,
  	0,244,247,3,83,41,0,245,247,9,0,0,0,246,244,1,0,0,0,246,245,1,0,0,0,247,
  	250,1,0,0,0,248,249,1,0,0,0,248,246,1,0,0,0,249,251,1,0,0,0,250,248,1,
  	0,0,0,251,252,5,34,0,0,252,82,1,0,0,0,253,254,5,92,0,0,254,258,5,34,0,
  	0,255,256,5,92,0,0,256,258,5,92,0,0,257,253,1,0,0,0,257,255,1,0,0,0,258,
  	84,1,0,0,0,259,260,7,4,0,0,260,261,1,0,0,0,261,262,6,42,0,0,262,86,1,
  	0,0,0,263,264,5,47,0,0,264,265,5,47,0,0,265,269,1,0,0,0,266,268,9,0,0,
  	0,267,266,1,0,0,0,268,271,1,0,0,0,269,270,1,0,0,0,269,267,1,0,0,0,270,
  	273,1,0,0,0,271,269,1,0,0,0,272,274,5,13,0,0,273,272,1,0,0,0,273,274,
  	1,0,0,0,274,275,1,0,0,0,275,276,5,10,0,0,276,277,1,0,0,0,277,278,6,43,
  	0,0,278,88,1,0,0,0,279,280,5,47,0,0,280,281,5,42,0,0,281,285,1,0,0,0,
  	282,284,9,0,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,286,1,0,0,0,285,283,
  	1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,5,42,0,0,289,290,5,47,
  	0,0,290,291,1,0,0,0,291,292,6,44,0,0,292,90,1,0,0,0,12,0,216,224,232,
  	234,240,246,248,257,269,273,285,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  std::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
